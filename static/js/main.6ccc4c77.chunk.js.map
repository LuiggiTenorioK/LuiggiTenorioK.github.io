{"version":3,"sources":["logo.svg","views/Landing.js","views/AutosubmitGraph.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Landing","document","title","Navbar","expand","Container","className","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","onClick","element_id","element","getElementById","scrollIntoView","behavior","handleClickScroll","Row","Col","src","style","height","backgroundColor","echartOption","text","toolbox","show","feature","restore","saveAsImage","animation","dataZoom","type","disabled","tooltip","series","roam","label","position","itemStyle","color","borderColor","emphasis","scale","edgeSymbol","edgeSymbolSize","lineStyle","draggable","zoom","nodeScaleRatio","scaleLimit","min","max","selectedMode","select","data","name","x","y","value","symbolSize","links","source","target","AutosubmitGraph","props","chartRef","useRef","width","ref","option","router","createBrowserRouter","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ccc4c77.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport { Card, Col, Container, Nav, Navbar, Row } from 'react-bootstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './Landing.css'\r\n\r\nconst Landing = () => {\r\n    document.title = \"Luiggi Tenorio | Software Engineer\"\r\n\r\n    const handleClickScroll = (element_id) => {\r\n        const element = document.getElementById(element_id);\r\n        if (element) {\r\n            // ðŸ‘‡ Will scroll smoothly to the top of the next section\r\n            element.scrollIntoView({ behavior: 'smooth' });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Navbar expand=\"lg\">\r\n                <Container className='my-4'>\r\n                    <Navbar.Brand><strong className='fw-bolder fs-1'>lbit.dev</strong></Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"responsive-navbar-nav\" className='justify-content-end'>\r\n                        <Nav>\r\n                            <Nav.Link className='fs-5' onClick={() => handleClickScroll(\"about-me\")}>about me</Nav.Link>\r\n                            {/* <Nav.Link>projects</Nav.Link> */}\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n\r\n\r\n            <div className='my-5'>\r\n                <Container className='p-2'>\r\n                    <Row className='mb-4'>\r\n                        <Col className='col-12 col-lg-6 align-self-center'>\r\n                            <div className='fw-bolder fs-2 text-center mb-3'>\r\n                                A Software Engineer and Data Enthusiast\r\n                            </div>\r\n                            <div className='fs-3 text-center'>\r\n                                Design and develop applications first, then I exist\r\n                            </div>\r\n                        </Col>\r\n                        <Col className='col-12 col-lg-6 text-center'>\r\n                            <img src={process.env.PUBLIC_URL + '/logo512.png'} style={{ height: \"300px\" }}></img>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n\r\n\r\n\r\n\r\n            <div id=\"about-me\" style={{ backgroundColor: \"var(--color-primary)\" }}>\r\n                <Container className='p-5'>\r\n                    <Row className='justify-content-center'>\r\n\r\n                        <Col className='col-12 col-lg-8 my-4'>\r\n                            <div className='fw-bolder fs-2 text-center mb-4 text-white'>\r\n                                Hi! I'm Luiggi. Nice to meet you.\r\n                            </div>\r\n                            <div className='fs-5 text-center text-white'>\r\n                                Professional with more than 2 years of experience in Software Engineering and 1 year in Data Engineering. Master's Student in Computer Engineering and Full-Stack Developer at the Biocomputing Lab of the University of Padua.\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n\r\n            <div>\r\n                <Container className='my-5'>\r\n                    <Row className='justify-content-center'>\r\n                        <Col className='px-0'>\r\n                            <div className='p-4 border rounded-start'>\r\n                                <div className='fw-bolder fs-4 text-center mb-3'>\r\n                                    Full-Stack Developer\r\n                                </div>\r\n                                {/* <div className='fs-5 text-center'>\r\n                                    Some Languages\r\n                                </div> */}\r\n                            </div>\r\n                        </Col>\r\n                        <Col className='px-0'>\r\n                            <div className='p-4 border border-start-0 rounded-end'>\r\n                                <div className='fw-bolder fs-4 text-center mb-3'>\r\n                                    Data Engineer\r\n                                </div>\r\n                                {/* <div className='fs-5 text-center'>\r\n                                    Some Languages\r\n                                </div> */}\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n\r\n            {/* <div>\r\n                <Container className='mb-5'>\r\n                    <Row className='justify-content-center'>\r\n                        <Col>\r\n                            <Card className='p-4'>\r\n                                <div className='fw-bolder fs-4 text-center mb-3'>\r\n                                    Data Engineer\r\n                                </div>\r\n\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div> */}\r\n            \r\n            {/* <div style={{ backgroundColor: \"var(--color-secondary)\", height: 400 }}>\r\n\r\n                </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Landing;","import React, { useEffect, useRef } from 'react';\nimport ReactEcharts from \"echarts-for-react\";\n\nconst echartOption = {\n    title: {\n        text: 'Autosubmit Graph Mockup'\n    },\n    toolbox: {\n        show: true,\n        feature: {\n            // dataView: { readOnly: false },\n            restore: {},\n            saveAsImage: {}\n        }\n    },\n    animation: false,\n    dataZoom: [{\n        type: \"inside\",\n        disabled: true\n    }],\n    tooltip: {},\n    series: [\n        {\n            type: 'graph',\n            roam: true,\n            label: {\n                show: true,\n                position: \"bottom\"\n            },\n            itemStyle: {\n                color: \"#fff\",\n                borderColor: '#000'\n            },\n            emphasis: {\n                scale: false,\n                itemStyle: {\n                    color: \"#eee\",\n                }\n            },\n            edgeSymbol: ['circle', 'arrow'],\n            edgeSymbolSize: [4, 10],\n            lineStyle: {\n                color: \"#000\"\n            },\n            draggable: true,\n            zoom: 0.7,\n            nodeScaleRatio: 0.8,\n            scaleLimit: {\n                min: 0.1,\n                max: 2\n            },\n            selectedMode: \"multiple\",\n            select: {\n                itemStyle: {\n                    color: \"#D2E5FF\",\n                    borderColor: \"#2B7CE9\"\n                }\n            },\n            data: [\n                {\n                    name: 't0kx_LOCAL_SETUP',\n                    x: 450,\n                    y: 0,\n                    value: \"300\",\n                    symbolSize: 50\n                },\n                {\n                    name: 't0kx_LOCAL_SEND_SOURCE',\n                    x: 400,\n                    y: 100,\n                    symbolSize: 100,\n                },\n                {\n                    name: 't0kx_LOCAL_SEND_SOURCE_2',\n                    x: 500,\n                    y: 100,\n                    symbolSize: 120,\n                }\n            ],\n            links: [\n                {\n                    source: \"t0kx_LOCAL_SETUP\",\n                    target: \"t0kx_LOCAL_SEND_SOURCE\"\n                },\n                {\n                    source: \"t0kx_LOCAL_SETUP\",\n                    target: \"t0kx_LOCAL_SEND_SOURCE_2\"\n                }\n            ]\n        }\n    ]\n}\n\nconst AutosubmitGraph = (props) => {\n    const chartRef = useRef(null);\n\n    document.title = \"Autosubmit Graph Mockup\"\n\n    return (\n        <div style={{ height: \"100vh\", width: \"100vv\"}}>\n            <ReactEcharts ref={chartRef} style={{height: '100%', width: '100%'}} option={echartOption} />\n        </div>\n    );\n};\n\nexport default AutosubmitGraph;","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport logo from './logo.svg';\nimport './App.css';\nimport './variables.css'\nimport Landing from './views/Landing';\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\nimport AutosubmitGraph from './views/AutosubmitGraph';\n\nconst router = createBrowserRouter([\n    {\n        path: \"/\",\n        element: <Landing />,\n    },\n    {\n        path: \"/autosubmit-graph\",\n        element: <AutosubmitGraph />\n    }\n]);\n\nfunction App() {\n    return (\n        <RouterProvider router={router} />\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}